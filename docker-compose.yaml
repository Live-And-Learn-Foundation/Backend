x-common-service: &common-service
  build:
    dockerfile: Dockerfile
  volumes:
    - ./services/{{ service_name }}:/app/{{ service_name }}
  depends_on:
    mysql:
      condition: service_healthy
    redis:
      condition: service_healthy
  networks:
    - network-1

services:
  auth:
    <<: *common-service
    build:
      context: ./services/auth
    command: python manage.py runserver 0.0.0.0:9000
    ports:
      - '9000:9000'
    env_file:
      - ./services/auth/config.env

  student:
    <<: *common-service
    build:
      context: ./services/student
    command: python manage.py runserver 0.0.0.0:9001
    ports:
      - '9001:9001'
    env_file:
      - ./services/student/config.env

  course:
    <<: *common-service
    build:
      context: ./services/course
    command: python manage.py runserver 0.0.0.0:9002
    ports:
      - '9002:9002'
    env_file:
      - ./services/course/config.env

  document:
    <<: *common-service
    build:
      context: ./services/document
    command: python manage.py runserver 0.0.0.0:9003
    ports:
      - '9003:9003'
    env_file:
      - ./services/document/config.env

  department:
    <<: *common-service
    build:
      context: ./services/department
    command: python manage.py runserver 0.0.0.0:9004
    ports:
      - '9004:9004'
    env_file:
      - ./services/department/config.env

  search:
    build:
      context: ./services/search
      dockerfile: Dockerfile
    volumes:
      - ./services/search:/app/search
    ports:
      - '9005:9005'
    command: python main.py
    networks:
      - network-1

  ontop:
    image: ontop/ontop
    environment:
      ONTOP_ONTOLOGY_FILE: /opt/ontop/input/university-complete.ttl
      ONTOP_MAPPING_FILE: /opt/ontop/input/university-complete.obda
      ONTOP_PROPERTIES_FILE: /opt/ontop/input/university-complete.compose.properties
      ONTOP_CORS_ALLOWED_ORIGINS: "*"
      ONTOP_DEV_MODE: "true"
      ONTOP_LAZY_INIT: "true"
    volumes:
      - ./ontop_input:/opt/ontop/input
      - ./jdbc:/opt/ontop/jdbc
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "9090:8080"
    networks:
      - network-1

  mysql:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    ports:
      - '3307:${DB_PORT}'
    healthcheck:
      test: ["CMD", "mysql", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}", "-e", "SELECT 1"]
      timeout: 1s
      retries: 10
    networks:
      - network-1

  redis:
    image: 'redis:alpine'
    restart: always
    hostname: redis
    ports:
      - '6379:${REDIS_PORT}'
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 1s
      timeout: 1s
      retries: 5
    volumes:
      - redis_data:/var/lib/redis
    networks:
      - network-1

  kong:
    image: kong:alpine
    restart: always
    environment:
      KONG_DATABASE: 'off'  # Tắt chế độ cơ sở dữ liệu
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_PROXY_LISTEN: '0.0.0.0:8000'
      KONG_PORTS: '8000,8443'  # Cổng proxy
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yaml
    ports:
      - '80:8000'
      - '8443:8443'
      - '127.0.0.1:8001:8001'
      - '127.0.0.1:8444:8444'
    volumes:
      - ./kong.yaml:/etc/kong/kong.yaml  # Gắn file cấu hình vào container
    networks:
      - network-1

  rabbitmq:
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - network-1
    healthcheck:
      test: [ 'CMD-SHELL', 'rabbitmqctl status' ]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9006:9000"
      - "9007:9001"
    volumes:
      - ./storage:/data
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: password
    command: server --console-address ":9001" /data

volumes:
  mysql_data:
  redis_data:
  kong_data:

networks:
  network-1:
    driver: bridge
