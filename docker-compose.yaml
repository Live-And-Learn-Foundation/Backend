services:
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:9000
    volumes:
      - ./services/auth:/app/auth
    ports:
      - '9000:9000'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./services/auth/config.env
    networks:
      - network-1

  student:
    build:
      context: ./services/student
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:9001
    volumes:
      - ./services/student:/app/student
    ports:
      - '9001:9001'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./services/student/config.env
    networks:
      - network-1
  
  course:
    build:
      context: ./services/course
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:9002
    volumes:
      - ./services/course:/app/course
    ports:
      - '9002:9002'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./services/course/config.env
    networks:
      - network-1

  document:
    build:
      context: ./services/document
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:9003
    volumes:
      - ./services/document:/app/document
    ports:
      - '9003:9003'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./services/document/config.env
    networks:
      - network-1

  department:
    build:
      context: ./services/department
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:9004
    volumes:
      - ./services/department:/app/department
    ports:
      - '9004:9004'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./services/department/config.env
    networks:
      - network-1

  mysql:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - .mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    ports:
      - '3306:${DB_PORT}'
    healthcheck:
      test:
        [
          'CMD',
          'mysql',
          '-h',
          'localhost',
          '-u',
          'root',
          '-p${DB_PASSWORD}',
          '-e',
          'SELECT 1',
        ]
      timeout: 1s
      retries: 10
    networks:
      - network-1

  redis:
    image: 'redis:alpine'
    restart: always
    hostname: redis
    ports:
      - '6379:${REDIS_PORT}'
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 1s
      timeout: 1s
      retries: 5
    volumes:
      - redis_data:/var/lib/redis
    networks:
      - network-1

  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - '5432:5432'
    volumes:
      - .kong_data:/var/lib/postgresql/data
    networks:
      - network-1

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@email.com
      PGADMIN_DEFAULT_PASSWORD: 123456789
    ports:
      - '5050:80'
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - network-1

  kong-migration:
    image: kong:latest
    command: kong migrations up && kong migrations finish
    restart: on-failure
    environment:
      KONG_DATABASE: 'postgres'
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - network-1
    healthcheck:
      test: ['CMD', 'test', '-f', '/tmp/migration_complete']
      interval: 5s
      timeout: 5s
      retries: 5

  kong:
    image: kong:latest
    restart: always
    environment:
      KONG_DATABASE: 'postgres'
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_PROXY_LISTEN: '0.0.0.0:8000'
    ports:
      - '8000:8000' # Proxy access
      - '8443:8443' # Secure Proxy access
      - '127.0.0.1:8001:8001' # Admin API access
      - '127.0.0.1:8444:8444' # Secure Admin API access
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - network-1

  kong-manager:
    image: kong:latest
    restart: always
    environment:
      KONG_DATABASE: 'postgres'
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PORTAL_GUI_HOST: '0.0.0.0:8002'
    ports:
      - '8002:8002'
    depends_on:
      kong:
        condition: service_healthy
    networks:
      - network-1

volumes:
  mysql_data:
  redis_data:
  kong_data:

networks:
  network-1:
    driver: bridge
