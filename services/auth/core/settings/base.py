"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from os.path import join, dirname

from oauth.tokens import signed_token_generator

from ..scopes import scopes, default_scopes
from . import env, BASE_DIR


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = (
#     os.environ["SECRET_KEY"] if "SECRET_KEY" in os.environ else env("SECRET_KEY")
# )
SECRET_KEY='django-insecure-n-x2wypxox@=znrr5t0j4&w@ce4@xz@9rq8m!5uqi^nf^#czk'

OIDC_RSA_PRIVATE_KEY_FILE = (
    os.environ["OIDC_RSA_PRIVATE_KEY_FILE"]
    if "OIDC_RSA_PRIVATE_KEY_FILE" in os.environ
    else env("OIDC_RSA_PRIVATE_KEY_FILE")
)
OIDC_RSA_PRIVATE_KEY_FILE = (
    join(BASE_DIR, OIDC_RSA_PRIVATE_KEY_FILE)
    if not OIDC_RSA_PRIVATE_KEY_FILE.startswith("/")
    else OIDC_RSA_PRIVATE_KEY_FILE
)
with open(OIDC_RSA_PRIVATE_KEY_FILE) as f:
    OIDC_RSA_PRIVATE_KEY = f.read()

JWT_ISSUER = (
    os.environ["JWT_ISSUER"]
    if "JWT_ISSUER" in os.environ
    else env.str("JWT_ISSUER", "Docs")
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=True)
API_HOST = env("API_HOST")

DEFAULT_HOST = (
    os.environ["DEFAULT_HOST"]
    if "DEFAULT_HOST" in os.environ
    else env.str("DEFAULT_HOST", default="localhost:8000")
)

ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=["127.0.0.1:8000", "localhost", "host.docker.internal"])
DEFAULT_CLIENT_SECRET = (
    os.environ["DEFAULT_CLIENT_SECRET"]
    if "DEFAULT_CLIENT_SECRET" in os.environ
    else env("DEFAULT_CLIENT_SECRET")
)

DEFAULT_CLIENT_ID = (
    os.environ["DEFAULT_CLIENT_ID"]
    if "DEFAULT_CLIENT_ID" in os.environ
    else env("DEFAULT_CLIENT_ID")
)
SUPER_ADMIN_EMAIL = (
    os.environ["SUPER_ADMIN_EMAIL"]
    if "SUPER_ADMIN_EMAIL" in os.environ
    else env.str("SUPER_ADMIN_EMAIL", default="service@pandosima.com")
)
SUPER_ADMIN_PASSWORD = (
    os.environ["SUPER_ADMIN_PASSWORD"]
    if "SUPER_ADMIN_PASSWORD" in os.environ
    else env.str("SUPER_ADMIN_PASSWORD", default="")
)


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = env("EMAIL_PORT", default=587)
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = env.str(
    "DEFAULT_FROM_EMAIL", default="Docs <noreply@pandosima.com>"
)

DEFAULT_OAUTH2_SCHEME = "http" if API_HOST in ["localhost", "127.0.0.1"] else "https"
API_PORT = "8000"
DEFAULT_OAUTH2_PORT = ":" + API_PORT if API_PORT is not None else ""
OAUTH2_URL = DEFAULT_OAUTH2_SCHEME + "://" + API_HOST + DEFAULT_OAUTH2_PORT
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework_api_key",
    'oauth2_provider',
    'corsheaders',
    'binary_database_files',
    'django_vite',
    'health_check',
    "base",
    'api_docs',
    'api_users',
    'oauth',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'base.middleware.exception_handling.ExceptionHandlingMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            join(BASE_DIR, "templates"),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# https://docs.djangoproject.com/en/5.0/ref/databases/#mysql-notes
DB_NAME = os.environ["DB_NAME"] if "DB_NAME" in os.environ else env("DB_NAME")
DATABASES = {
    'default': {
        "ENGINE": "django.db.backends.mysql",
        'NAME': DB_NAME,
        "USER": os.environ["DB_USER"] if "DB_USER" in os.environ else env("DB_USER"),
        "PASSWORD": os.environ["DB_PASSWORD"] if "DB_PASSWORD" in os.environ else env("DB_PASSWORD"),
        "HOST": os.environ["DB_HOST"] if "DB_HOST" in os.environ else env("DB_HOST"),
        "PORT": os.environ["DB_PORT"] if "DB_PORT" in os.environ else env("DB_PORT"),
        "OPTIONS": {"charset": "utf8mb4"},
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL="api_users.User"

OAUTH2_PROVIDER_APPLICATION_MODEL = "oauth.Application"
OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = "oauth.AccessToken"
OAUTH2_PROVIDER_ID_TOKEN_MODEL = "oauth.IDToken"
OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = "oauth.RefreshToken"
OAUTH2_PROVIDER_GRANT_MODEL = "oauth.Grant"

AUTHENTICATION_BACKENDS = (
    "oauth.backends.CustomOAuth2Backend",
    "django.contrib.auth.backends.ModelBackend",  # To keep the Browsable API
)
OAUTH2_PROVIDER = {
    "OIDC_ENABLED": True,
    "OIDC_RSA_PRIVATE_KEY": OIDC_RSA_PRIVATE_KEY,
    "SCOPES": scopes,
    "DEFAULT_SCOPES": default_scopes,
    "SCOPES_BACKEND_CLASS": "oauth.settings_scopes.SettingsScopes",
    "OAUTH2_VALIDATOR_CLASS": "oauth.oauth_validators.CustomOAuth2Validator",
    "ACCESS_TOKEN_GENERATOR": signed_token_generator(
        OIDC_RSA_PRIVATE_KEY, issuer=JWT_ISSUER
    ),
    "REFRESH_TOKEN_GENERATOR": "oauthlib.oauth2.rfc6749.tokens.random_token_generator",
    "ACCESS_TOKEN_EXPIRE_SECONDS": 3600,
    "REFRESH_TOKEN_GRACE_PERIOD_SECONDS": 4000,
    # ... any other settings you want
}

REST_FRAMEWORK = {

    "DEFAULT_PERMISSION_CLASSES": ["oauth.permissions.TokenHasActionScope"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
    ],
}

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Ho_Chi_Minh'

USE_I18N = True

USE_TZ = True

# Where ViteJS assets are built.
DJANGO_VITE_STATIC_URL_PREFIX = ""
FRONTEND_STATIC_PATH=join(dirname(BASE_DIR), "frontend", "public")
DJANGO_VITE_ASSETS_PATH = join(dirname(BASE_DIR), "frontend", "dist")
DJANGO_VITE_MANIFEST_PATH = join(BASE_DIR, "static", "manifest.json")

# If use HMR or not.
DJANGO_VITE_DEV_MODE = DEBUG
DJANGO_VITE_DEV_SERVER_PORT = 5173
DJANGO_VITE_WS_CLIENT_URL = "@vite/client"
DJANGO_VITE_REACT_REFRESH_URL = "@react-refresh"

ALLOWED_HOSTS=['*']

CORS_ORIGIN_ALLOW_ALL = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    FRONTEND_STATIC_PATH,
    DJANGO_VITE_ASSETS_PATH,
    join(DJANGO_VITE_ASSETS_PATH, "static")
]
if DEBUG:
    FRONTEND_ASSETS_PATH = join(dirname(BASE_DIR), "frontend", "static")
    STATICFILES_DIRS += [
        FRONTEND_ASSETS_PATH,
    ]

# Root route

# Name of static files folder (after called python manage.py collectstatic)
STATIC_ROOT = join(BASE_DIR, "static")
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"

MEDIA_ROOT = join(BASE_DIR, "media")
MEDIA_URL = "/media/"


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# AWS config
# AWS_ACCESS_KEY_ID = (
#     os.environ["AWS_ACCESS_KEY_ID"]
#     if "AWS_ACCESS_KEY_ID" in os.environ
#     else env("AWS_ACCESS_KEY_ID")
# )
# AWS_SECRET_ACCESS_KEY = (
#     os.environ["AWS_SECRET_ACCESS_KEY"]
#     if "AWS_SECRET_ACCESS_KEY" in os.environ
#     else env("AWS_SECRET_ACCESS_KEY")
# )
# AWS_STORAGE_BUCKET_NAME = (
#     os.environ["AWS_STORAGE_BUCKET_NAME"]
#     if "AWS_STORAGE_BUCKET_NAME" in os.environ
#     else env("AWS_STORAGE_BUCKET_NAME")
# )

# AWS_S3_REGION_NAME = (
#     os.environ["AWS_S3_REGION_NAME"]
#     if "AWS_S3_REGION_NAME" in os.environ
#     else env("AWS_S3_REGION_NAME")
# )
# AWS_S3_REGION_NAME = (
#     None
#     if AWS_S3_REGION_NAME is not None and len(AWS_S3_REGION_NAME.strip()) == 0
#     else AWS_S3_REGION_NAME.strip()
# )

# STORE_USER_FILES_ON_S3 = os.environ["STORE_USER_FILES_ON_S3"]
# STORE_USER_FILES_ON_S3 = (
#     env.bool("STORE_USER_FILES_ON_S3", default=False)
#     if STORE_USER_FILES_ON_S3 is None
#     else STORE_USER_FILES_ON_S3
# )
# if not isinstance(STORE_USER_FILES_ON_S3, bool):
#     STORE_USER_FILES_ON_S3 = (
#         True if STORE_USER_FILES_ON_S3.lower() in ["true", "1"] else False
#     )

# if STORE_USER_FILES_ON_S3:
#     DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
#     AWS_QUERYSTRING_AUTH = True
#     AWS_DEFAULT_ACL = None
#     AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
# else:
DEFAULT_FILE_STORAGE = "binary_database_files.storage.DatabaseStorage"
DB_FILES_AUTO_EXPORT_DB_TO_FS = False
DATABASE_FILES_URL_METHOD = "URL_METHOD_2"
DATABASE_FILES_BASE_URL = "http://localhost:8000"